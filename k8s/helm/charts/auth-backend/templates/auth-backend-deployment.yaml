apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "auth-backend.fullname" . }}
  labels:
    {{- include "auth-backend.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "auth-backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "auth-backend.selectorLabels" . | nindent 8 }}
        redis-client: "true"
    spec:
      {{- if .Values.hostNetworking }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        ports:
          - name: http
            protocol: TCP
            containerPort: 8080
        startupProbe:
          httpGet:
            path: /.well-known/express/server-health
            port: http
          failureThreshold: 30
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /.well-known/express/server-health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /.well-known/express/server-health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
        env:
        - name: DOMAIN
          value: {{ .Values.domain }}
        - name: PORT
          value: "8080"
        - name: JWT_ISSUER
          value: "kidsloop"
        - name: JWT_ACCESS_TOKEN_DURATION
          value: "900"
        - name: JWT_REFRESH_TOKEN_DURATION
          value: "1206000"
        - name: JWT_ALGORITHM
          valueFrom:
            secretKeyRef:
              name: auth-jwt-credentials
              key: jwt-algorithm
        - name: JWT_PRIVATE_KEY_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: auth-jwt-credentials
              key: jwt_private_passphrase
        - name: JWT_PRIVATE_KEY_FILENAME
          value: /key/private_key
        - name: JWT_PUBLIC_KEY_FILENAME
          value: /key/public_key
        - name: DB_SECRET
          valueFrom:
            secretKeyRef:
              name: postgresql
              key: postgresql-password
        - name: DATABASE_URL
          value: "postgres://{{ .Values.postgresql_username }}:$(DB_SECRET)@{{ .Values.postgresql_host }}/{{ .Values.postgresql_database }}"
        - name: NEW_RELIC_NO_CONFIG_FILE
          value: "true"
        - name: NEW_RELIC_APP_NAME
          value: {{ include "auth-backend.fullname" . }}_{{  .Values.deployment_name }}
        - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
          value: "true"
        - name: NEW_RELIC_LABELS
          value: Deployment:{{  .Values.deployment_name }};Region:{{  .Values.deployment_region }};Environment:{{  .Values.deployment_env }};Version:{{  .Values.image.tag }};Component:{{ include "auth-backend.fullname" . }}
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: newrelic-apikey-secret
              key: NEW_RELIC_LICENSE_KEY
        {{- if .Values.azure_b2c.enabled }}
        - name: AZURE_B2C_ENABLED
          value: "{{ .Values.azure_b2c.enabled }}"
        - name: AZURE_B2C_TENANT_ID
          value: {{ .Values.azure_b2c.tenant_id }}
        - name: AZURE_B2C_DOMAIN
          value: {{ .Values.azure_b2c.domain }}
        - name: AZURE_B2C_POLICY_NAME
          value: {{ .Values.azure_b2c.policy_name }}
        - name: AZURE_B2C_AUTHORITY
          value: {{ .Values.azure_b2c.authority }} 
        - name: AZURE_B2C_CLIENT_ID
          value: {{ .Values.azure_b2c.client_id }}
        {{ end }}
        volumeMounts:
          - name: auth-jwt-credentials
            mountPath: /key
            readOnly: true
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      {{- if eq .Values.provider "gcp" }}
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.1
        command:
          - "/cloud_sql_proxy"
          - "-ip_address_types=PRIVATE"
          - "-instances={{ .Values.project }}:{{ .Values.region }}:{{ .Values.postgresql_instance }}=tcp:5432"
        securityContext:
          runAsNonRoot: true
        resources:
          {{- toYaml .Values.sqlProxy.resources | nindent 12 }}
      {{- end }}
      volumes:
        - name: auth-jwt-credentials
          secret:
            secretName: auth-jwt-credentials
      {{- if eq .Values.provider "gcp" }}
      serviceAccountName: cloudsql-proxy
      {{- end }}
