apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "auth-backend.fullname" . }}
  labels:
    {{- include "auth-backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "auth-backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "auth-backend.selectorLabels" . | nindent 8 }}
        redis-client: "true"
    spec:
      nodeSelector:
        {{- toYaml .Values.nodegroupSelector | nindent 12 }}

      {{- if .Values.hostNetworking }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        ports:
          - name: http
            protocol: TCP
            containerPort: {{ .Values.authBackend.port }}
        env:
        - name: DOMAIN
          value: {{ .Values.envVariables.domain }}
        - name: PORT
          value: "{{ .Values.authBackend.port }}"
        - name: JWT_ISSUER
          value: "{{ .Values.authBackend.jwt.issuer }}"
        - name: JWT_ACCESS_TOKEN_DURATION
          value: "{{ .Values.authBackend.jwt.access_duration_seconds }}"
        - name: JWT_REFRESH_TOKEN_DURATION
          value: "{{ .Values.authBackend.jwt.refresh_duration_seconds }}"
        {{- if .Values.authBackend.jwt.existingSecret }}
        - name: JWT_ALGORITHM
          valueFrom:
            secretKeyRef:
              name: {{ .Values.authBackend.jwt.existingSecret.name }}
              key: jwt_algorithm
        - name: JWT_PRIVATE_KEY_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: {{ .Values.authBackend.jwt.existingSecret.name }}
              key: jwt_private_passphrase
        - name: JWT_PRIVATE_KEY_FILENAME
          value: /key/private_key
        - name: JWT_PUBLIC_KEY_FILENAME
          value: /key/public_key
        {{- else if .Values.authBackend.jwt.secretData }}
        - name: JWT_ALGORITHM
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-auth-jwt-credentials
              key: jwt_algorithm
        - name: JWT_PRIVATE_KEY_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-auth-jwt-credentials
              key: jwt_private_passphrase
        - name: JWT_PRIVATE_KEY_FILENAME
          value: /key/private_key
        - name: JWT_PUBLIC_KEY_FILENAME
          value: /key/public_key
        {{- end }}
        {{- if .Values.database.connectionString.existingSecret }}
        - name: DATABASE_URL
          valueFrom:
            {{- with .Values.database.connectionString.existingSecret }}
            secretKeyRef:
              {{- toYaml . | nindent 14 }}
            {{- end }}
        {{- else if .Values.database.connectionString.value }}
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-postgres
              key: database-url
        {{- end }}
        volumeMounts:
          - name: auth-jwt-credentials
            mountPath: /key
            readOnly: true
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      {{- if eq .Values.provider "gcp" }}
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.1
        command:
          - "/cloud_sql_proxy"
          - "-ip_address_types=PRIVATE"
          - "-instances={{ .Values.project }}:{{ .Values.region }}:{{ .Values.postgresql_instance }}=tcp:5432"
        securityContext:
          runAsNonRoot: true
      {{- end }}
      volumes:
        - name: auth-jwt-credentials
          secret:
            {{- if .Values.authBackend.jwt.existingSecret }}
            secretName: {{ .Values.authBackend.jwt.existingSecret.name }}
            {{- else if .Values.authBackend.jwt.secretData }}
            secretName: {{ .Release.Name }}-auth-jwt-credentials
            {{- end}}
      {{- if eq .Values.provider "gcp" }}
      serviceAccountName: cloudsql-proxy
      {{- end }}
