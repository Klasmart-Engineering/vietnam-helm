apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "user_service.fullname" . }}
  labels:
    {{- include "user_service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "user_service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "user_service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        #command: [ "/bin/bash", "-c", "--" ]
        #args: [ "while true; do sleep 30; done;" ]
        ports:
          - name: http
            protocol: TCP
            containerPort: 8080
        env:
          - name: NODE_ENV
            value: "beta"
          - name: DOMAIN
            value: {{ .Values.domain }}
          - name: PORT
            value: "8080"
          - name: ROUTE_PREFIX
            value: "/user"
          - name: DB_HOST
            value: {{- if eq .Values.provider "gcp" }} "127.0.0.1" {{- else }} {{ .Values.postgresql_host }} {{- end }}
          - name: DB_NAME
            value: {{ .Values.postgresql_database }}
          - name: DB_USERNAME
            value: {{ .Values.postgresql_username }}
          - name: DB_SECRET
            valueFrom:
              secretKeyRef:
                name: postgresql
                key: postgresql-password
          - name: DATABASE_URL
            value: "postgres://$(DB_USERNAME):$(DB_SECRET)@$(DB_HOST)/$(DB_NAME)"
          - name: STORAGE_BUCKET
            value: {{ .Values.whitelabel_storage_bucket }}
          - name: STORAGE_PROVIDER
            value: {{ .Values.whitelabel_storage_provider }}
          {{ if .Values.storage_endpoint }}
          - name: FORCE_LOCAL_STORAGE
            value: {{ .Values.whitelabel_force_local_storage }}
          - name: STORAGE_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: user-s3-secret
                key: aws_access_key_id
          - name: STORAGE_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: user-s3-secret
                key: secret_access_key
          - name: STORAGE_REGION
            value: {{ .Values.region }}
          - name: STORAGE_ENDPOINT
            value: {{ .Values.storage_endpoint }}
          {{ end }}
          - name: STORAGE_PROJECT_ID
            value: {{ .Values.project }}
        
        {{- if eq .Values.provider "gcp" }}
          - name: STORAGE_GOOGLE_KEY_FILE_NAME
            value: /key/key.json
        volumeMounts:
          - name: whitelabel-storage-sa-key
            mountPath: /key
            readOnly: true
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      
      {{- if eq .Values.provider "gcp" }}
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.1
        command:
          - "/cloud_sql_proxy"
          - "-ip_address_types=PRIVATE"
          - "-instances={{ .Values.project }}:{{ .Values.region }}:{{ .Values.postgresql_instance }}=tcp:5432"
        securityContext:
          runAsNonRoot: true  
      serviceAccountName: cloudsql-proxy
      volumes:
        - name: whitelabel-storage-sa-key
          secret:
            secretName: whitelabel-bucket
      {{- end }}