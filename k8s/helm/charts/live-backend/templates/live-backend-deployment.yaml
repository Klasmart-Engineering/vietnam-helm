apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "live-backend.fullname" . }}
  labels:
    {{- include "live-backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "live-backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "live-backend.selectorLabels" . | nindent 8 }}
        redis-client: "true"
    spec:
      nodeSelector:
        {{- toYaml .Values.nodegroupSelector | nindent 12 }}

      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if .Values.hostNetworking }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}

      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        ports:
          - name: http
            protocol: TCP
            containerPort: 8080
        env:
          - name: NODE_ENV
            value: "beta"
          - name: PORT
            value: "8080"
          - name: REDIS_HOST
            value: {{ .Values.redisHost }}
          - name: REDIS_PASS
            value: {{ .Values.redisPassword }}
          - name: REDIS_PORT
            value: {{ .Values.redisPort | quote }}
          - name: ASSESSMENT_ENDPOINT
            value: {{ .Values.assessmentEndpoint }}
          - name: AWS_SECRET_NAME
            value: {{ .Values.jwt.awsSecretName }}
          {{- if .Values.database.connectionString.existingSecret }}
          - name: DATABASE_URL
            valueFrom:
              {{- with .Values.database.connectionString.existingSecret }}
              secretKeyRef:
                {{- toYaml . | nindent 16 }}
              {{- end }}
          {{- else if .Values.database.connectionString.value }}
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-postgres
                key: database-url
          {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
          
      {{- if eq .Values.provider "gcp" }}
      - name: postgresql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.1
        command:
          - "/cloud_sql_proxy"
          - "-ip_address_types=PRIVATE"
          - "-instances={{ .Values.project }}:{{ .Values.region }}:{{ .Values.postgresql_instance }}=tcp:5432"
        securityContext:
          runAsNonRoot: true

      serviceAccountName: cloudsql-proxy
      {{- end }}