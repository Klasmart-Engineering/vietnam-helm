apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "live-backend.fullname" . }}
  labels:
    {{- include "live-backend.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "live-backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "live-backend.selectorLabels" . | nindent 8 }}
        redis-client: "true"
    spec:
      {{- if .Values.hostNetworking }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        ports:
          - name: http
            protocol: TCP
            containerPort: 8080
        startupProbe:
          httpGet:
            path: /.well-known/apollo/server-health
            port: http
          failureThreshold: 30
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /.well-known/apollo/server-health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /.well-known/apollo/server-health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
        env:
          - name: NODE_ENV
            value: "beta"
          - name: PORT
            value: "8080"
          - name: REDIS_HOST
            value: {{ .Values.redisHost }}
          - name: REDIS_PORT
            value: {{ .Values.redisPort | quote }}
          - name: ASSESSMENT_ENDPOINT
            value: {{ .Values.assessmentEndpoint }}
          - name: DB_SECRET
            valueFrom:
              secretKeyRef:
                name: postgresql
                key: postgresql-password
          - name: DATABASE_URL
            value: "postgres://{{ .Values.postgresql_username }}:$(DB_SECRET)@{{ .Values.postgresql_host }}/{{ .Values.postgresql_database }}"
          # The issuer is set to kidsloop in other services, but it MUST be set to kidsloop-live in this service
          {{- if .Values.liveJwtKey.enabled }}
          - name: JWT_ISSUER
            value: "kidsloop-live"
          - name: JWT_ACCESS_TOKEN_DURATION
            value: "900"
          - name: JWT_REFRESH_TOKEN_DURATION
            value: "1206000"
          - name: JWT_ALGORITHM
            valueFrom:
              secretKeyRef:
                name: live-jwt-credentials
                key: jwt-algorithm
          - name: JWT_PRIVATE_KEY_FILENAME
            value: /key/private_key
          - name: JWT_PUBLIC_KEY_FILENAME
            value: /key/public_key
          {{- if .Values.liveJwtKey.passphrase.enabled }}
          - name: JWT_PRIVATE_KEY_PASSPHRASE
            {{- if .Values.liveJwtKey.passphrase.literal }}
            value: {{ .Values.liveJwtKey.passphrase.literal }}
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: live-jwt-credentials
                key: {{ .Values.liveJwtKey.passphrase.secretFieldRef }}
            {{- end }}
          {{- end }}
          {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.liveJwtKey.enabled }}
        volumeMounts:
          - name: live-jwt-credentials
            mountPath: /key
            readOnly: true
        {{- end }}

      {{- if eq .Values.provider "gcp" }}
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.1
        command:
          - "/cloud_sql_proxy"
          - "-ip_address_types=PRIVATE"
          - "-instances={{ .Values.project }}:{{ .Values.region }}:{{ .Values.postgresql_instance }}=tcp:5432"
        securityContext:
          runAsNonRoot: true
        resources:
          {{- toYaml .Values.sqlProxy.resources | nindent 12 }}
      serviceAccountName: cloudsql-proxy
      {{- end }}
      {{- if .Values.liveJwtKey.enabled }}
      volumes:
        - name: live-jwt-credentials
          secret:
            secretName: {{ .Values.liveJwtKey.existingSecretName }}
      {{- end }}
